/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Model.OptionSet;
import Model.PizzaConfig;
import Model.PizzaOption;
import dao.GenericDao;
import dao.IGenericDao;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.UUID;
import javax.swing.JFileChooser;


public class ManagerUI extends javax.swing.JFrame {

    private static final String path = "C:\\Users\\Student\\Desktop\\Serie\\PizzaAppV2\\src\\main\\java\\properties\\";
    IGenericDao<PizzaOption> gdpo=new GenericDao<>();
    IGenericDao<PizzaConfig>gdpc=new GenericDao<>();
    IGenericDao<OptionSet>gdos=new GenericDao<>();
    
    
    
    public ManagerUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Choosing = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Manager UI");

        Choosing.setText("Choose");
        Choosing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChoosingActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        dTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Price", "Options","Update","Delete"
            }
        ));
        jScrollPane1.setViewportView(dTable);

        jLabel2.setText("All Pizzas");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Choosing, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(Choosing)
                .addGap(29, 29, 29)
                .addComponent(Save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String generatedName;

    private void ChoosingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChoosingActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        String newName = UUID.randomUUID().toString() + ".properties";
        generatedName = newName;
        try {
            FileInputStream fis = new FileInputStream(f);
            copyFile(newName, fis, path);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_ChoosingActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        try {
            Properties props = new Properties();
            FileInputStream fis = new FileInputStream(path+generatedName);
            props.load(fis);
            
            String pizzaName=props.getProperty("name");
            String price=props.getProperty("price");
            Double dprice=Double.parseDouble(price);
            String setOptionSets=props.getProperty("optionSet");
            String option1=props.getProperty("Option1");
            String option2=props.getProperty("Option2");
            String option3=props.getProperty("Option3");
            String option4=props.getProperty("Option4");
            
            //set pizzaConfig
            OptionSet getOptionSet = new OptionSet();
            PizzaConfig config = new PizzaConfig();
            config.setName(pizzaName);
            config.setDelivery(0.00);
            config.setBaseprice(dprice);
            //set options
            
            PizzaOption options1 = new PizzaOption();
            options1.setName(option1); 
            options1.setPrice(100.0);
            options1.setOptionSet(getOptionSet);
            PizzaOption options2 = new PizzaOption();
            options2.setName(option2);
            options2.setPrice(100.0);
            options2.setOptionSet(getOptionSet);
            PizzaOption options3 = new PizzaOption();
            options3.setName(option3);
            options3.setPrice(100.0);
            options3.setOptionSet(getOptionSet);
            PizzaOption options4 = new PizzaOption();
            options4.setName(option4);
            options4.setPrice(100.0);
            options4.setOptionSet(getOptionSet);
            
            Set<PizzaOption> pizzaOptions = new HashSet<>();
            pizzaOptions.add(options1);
            pizzaOptions.add(options2);
            pizzaOptions.add(options3);
            pizzaOptions.add(options4);
            
            
            getOptionSet.setName(setOptionSets);
            getOptionSet.setOptions(pizzaOptions);
            getOptionSet.setPizzaConfig(config);
            
            
            Set<OptionSet> optionSets = new HashSet<>();
            optionSets.add(getOptionSet);
            config.setOptionSets(optionSets);
            gdpc.create(config);
            
            //gdpo.create(pizzaOptions);
            
                
            

        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_SaveActionPerformed

    private void copyFile(String fileName, InputStream in, String concatinationPath) {
        try {
            OutputStream out = new FileOutputStream(new File(concatinationPath + fileName));
            int read = 0;
            byte[] bytes = new byte[1024];
            while ((read = in.read(bytes)) != -1) {
                out.write(bytes, 0, read);
            }

            in.close();
            out.flush();
            out.close();

        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("we have the following error please try again later ---------------------------" + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Choosing;
    private javax.swing.JButton Save;
    private javax.swing.JTable dTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
